apiVersion: v1
kind: Secret
metadata:
  name: {{ include "private.fullname" . }}-certs
  labels:
    {{- include "private.labels" . | nindent 4 }}
type: Opaque
data:
  {{- if .Values.ssl.create }}
  {{- $ca := genCA ( include "private.fullname" . ) 365 }}
  {{- $cn := default .Release.Namespace .Values.ssl.cn }}
  {{- $altNames := list $cn (printf "%s:%d" $cn .Values.service.port) "localhost" (printf "localhost:%d" .Values.service.port) }}
  {{- $ipList := list "127.0.0.1" }}  
  {{- $server := genSignedCert $cn ( default $ipList .Values.ssl.ipList ) ( default $altNames .Values.ssl.sanList ) 365 $ca }}
  tls.crt: {{ $server.Cert | b64enc }}
  tls.key: {{ $server.Key | b64enc }}
  tls-ca.crt: {{ $ca.Cert | b64enc }}
  tls-ca.key: {{ $ca.Key | b64enc }}
  {{- else }}
  tls.crt: {{ required "ssl.crt is required" .Values.ssl.crt }}
  tls.key: {{ required "ssl.key is required" .Values.ssl.key }}
  {{- if .Values.ssl.ca.trustCA }}
  tls-ca.crt: {{ required "ssl.ca.crt is required" .Values.ssl.ca.crt }}
  tls-ca.key: {{ required "ssl.ca.key is required" .Values.ssl.ca.key }}
  {{- end }}
  {{- end }}
  {{- if and .Values.dataProtection.create .Release.IsInstal }}
  {{- $ca := genCA ( include "private.fullname" . ) 365 }}
  {{- $cn := default .Release.Namespace .Values.dataProtection.cn }}
  {{- $server := genSignedCert $cn ( default nil .Values.dataProtection.ipList ) ( default nil .Values.dataProtection.sanList ) 365 $ca }}
  dataProtection.crt: {{ $server.Cert | b64enc }}
  dataProtection.key: {{ $server.Key | b64enc }}
  {{- else }}
  dataProtection.crt: {{ required "dataProtection.crt is required when dataProtection.create is false or for an upgrade" .Values.dataProtection.crt }}
  dataProtection.key: {{ required "dataProtection.key is required when dataProtection.create is false or for an upgrade" .Values.dataProtection.key }}
  {{- end }}
  {{- if and .Values.signingKey.create .Release.IsInstal }}
  {{- $ca := genCA ( include "private.fullname" . ) 365 }}
  {{- $cn := default .Release.Namespace .Values.signingKey.cn }}
  {{- $server := genSignedCert $cn ( default nil .Values.signingKey.ipList ) ( default nil .Values.signingKey.sanList ) 365 $ca }}
  signingKey.crt: {{ $server.Cert | b64enc }}
  signingKey.key: {{ $server.Key | b64enc }}
  {{- else }}
  signingKey.crt: {{ required "signingKey.crt is required when signingKey.create is false or for an upgrade" .Values.signingKey.crt }}
  signingKey.key: {{ required "signingKey.key is required when signingKey.create is false or for an upgrade" .Values.signingKey.key }}
  {{- end }}

